As programs get longer and more complex, they become more difficult to design, code, and maintain.
As with any large endeavor, it is often useful to break a single, large task into a series of smaller tasks.

A couple of important points about functions:
First, they must appear before you attempt to use them.
Second, the function body must contain at least one valid command.
The simple way to fix this is to place a "return" statement in each function body.

function_name()
{

}

function greet {
    echo "Hi $1 there!"
}

It is is often a good practice to add a small amount of code, run the script, add some more code, run the script, and so on.
This way, if you introduce a mistake into your code, it will be easier to find and correct.

As you add functions to your script, you can also use a technique called stubbing to help watch the logic of your script develop.

Stubbing works like this:
Imagine that we are going to create a function called "system_info" but we haven't figured out all of the details of its code yet. Rather than hold up the development of the script until we are finished with system_info, we just add an echo command like this:

system_info()
{
  # temporary function stub
  echo "function system_info"
}

####function call : system_info



####passing parameter :)

# An error exit function

error_exit()
{
    echo "$1" 1>&2
      exit 1
}

# Using error_exit

if cd $some_directory; then
    rm *
else
  error_exit "Cannot change directory!  Aborting."
fi
