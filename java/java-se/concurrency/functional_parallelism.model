- The basic idea of functional parallelism is 
  that you implement your programs using function calls.

- Function calls can be thought as sending messages.

- In function calls, all parameters passed to a function are copied, 
  so no entity outside the receiving function can manipulate the data.
  This copying is essential to avoiding race conditions on the shared data.
  This makes the function execution similar to an atomic operation.
  Each function call can be executed independently of any other function call.

- When each function call can be executed independetly,
  each function call can be executed on separate CPUs.
  That means, that an algorithm implemented functionally can be executed in parallel, on multiple CPUs.

- ForkAndJoinPool, java 8 streams.

- The hard part about fparallelism is knowing which function calls to parallelize.
  Coordinating function calls across CPUs comes with an overhead.
  The unit of work completed by a function need to be a certain size to be worth this overhead.
  If function calls are very small, you get better performance in singlethreaded, single CPU execution.
